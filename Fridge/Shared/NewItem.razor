@using Models
@using Repository
@inject IItem ItemRepo
@inject NavigationManager NavigationManager


<div class="field">
    <form>
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
        <div class="form-group">
            <label asp-for="Item.Name" class="control-label">Name</label>
            <input asp-for="Item.Name" class="form-control" @bind="inputName" />
            <span asp-validation-for="Item.Name" class="text-danger"></span>
        </div>
        <div class="form-group">
            <label asp-for="Item.ExpirationDate" class="control-label">Expiration Date</label>
            <input type="date" asp-for="Item.ExpirationDate" class="form-control" @bind="inputDate" />
            <span asp-validation-for="Item.ExpirationDate" class="text-danger"></span>
        </div>
        <input type="buton" class="btn btn-primary" value="Save" @onclick="ConvertInputs" />
    </form>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private String inputName { get; set; }
    private DateOnly inputDate = DateOnly.FromDateTime(DateTime.Now.Date);

    private async Task ConvertInputs()
    {
        if(Id == 0)
        {
            await AddItem(inputDate.ToDateTime(TimeOnly.Parse("00:00")));
            NavigationManager.NavigateTo("/", true);
        }
        else if(Id != 0)
        {
            await UpdateItem(inputDate.ToDateTime(TimeOnly.Parse("00:00")));
            NavigationManager.NavigateTo("/", true);
        }

    }

    private async Task<String> AddItem(DateTime date)
    {
        return await ItemRepo.AddItem(new Item(Id, inputName, date));
    }

    private async Task<String> UpdateItem(DateTime date)
    {
        return await ItemRepo.UpdateItem(Id, inputName, date);
    }

    
}